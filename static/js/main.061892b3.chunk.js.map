{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","components/Header.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react_default","a","createElement","className","src","concat","props","id","alt","name","email","username","Component","CardList","robots","map","user","i","components_Card","SearchBox","searchChange","aria-label","type","placeholder","onChange","Scroll","style","overflowY","height","children","ErrorBoundary","_this","call","state","hasError","error","info","setState","Header","nextProps","nextState","nextContext","App","onRequestRobots","_this$props","searchField","onSearchChange","filteredRobots","filter","robot","toLowerCase","includes","length","components_Header","components_SearchBox","components_Scroll","components_ErrorBoundary","components_CardList","connect","searchRobots","requestRobots","isPending","dispatch","event","payload","target","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.061892b3.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport class Card extends Component {\n  render() {\n    return (\n      <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n        <img src={`https://robohash.org/${this.props.id}?size=200x200`} alt='' />\n        <div>\n            <h2>{this.props.name}</h2>\n            <p>{this.props.email}</p>\n            <p>{this.props.username}</p>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Card\n\n// const { name, email, id} = props\n","import React, { Component } from \"react\";\nimport Card from \"./Card\";\n\nexport class CardList extends Component {\n  render() {\n      const {robots} = this.props\n    return (\n      <div>\n        {robots.map((user, i) => {\n          return (\n            <Card\n              key={i}\n              id={robots[i].id}\n              name={robots[i].name}\n              username={robots[i].username}\n              email={robots[i].email}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nexport default CardList;\n\n/* <Card id={robots[0].id} name={robots[0].name} username={robots[0].username} email={robots[0].email} />\n<Card id={robots[1].id} name={robots[1].name} username={robots[1].username} email={robots[1].email} />\n<Card id={robots[2].id} name={robots[2].name} username={robots[2].username} email={robots[2].email} /> */\n","import React, { Component } from 'react'\n// import searchChange from './App'\n\nexport class SearchBox extends Component {\n    render() {\n        const {searchChange} = this.props\n    return (\n      <div className=\"pa2 tc\">\n        <input\n        aria-label='Search Robot'\n          type=\"search\"\n          className=\"pa3 ba b--green bg-lightest-blue\"\n          placeholder=\"Search Robots\"\n          onChange={ searchChange }  \n        />\n      </div>\n    );\n  }\n}\n// we call searchChange function everytime there is a change to the input value of the searchbox\n\n\n// const SearchBox = ({searchfield, searchChange}) => {\n//     return (\n//         <div className=\"pa2 tc\">\n//           <input\n//             type=\"search\"\n//             className=\"pa3 ba b--green bg-lightest-blue\"\n//             placeholder=\"Search Robots\"\n//             onChange={searchChange}\n//           />\n//         </div>\n//       );\n// }\n\n\n\nexport default SearchBox;\n","import React, { Component } from 'react'\n\nexport class Scroll extends Component {\n  render() {\n    return (\n      <div style={{overflowY: 'scroll', height: '800px'}}>\n        {this.props.children}\n      </div>\n    )\n  }\n}\n\nexport default Scroll\n","import React, { Component } from 'react'\n\nexport class ErrorBoundary extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({ hasError: true })\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return <h1>Sorry there is an error</h1>\n        }\n        return (\n            <div>\n                {this.props.children}\n            </div>\n        )\n    }\n}\n\nexport default ErrorBoundary\n","import React, { Component } from 'react'\n// import CounterButton from './CounterButton'\n\nexport class Header extends Component {\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n         return false\n    }\n\n    render() {\n        return (\n            <div>\n                {/* <CounterButton color={'red'} /> */}\n                <h1>Robo Friends</h1>\n            </div>\n        )\n    }\n}\n\nexport default Header\n","import React, { Component } from \"react\";\nimport { connect } from 'react-redux'\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport \"./App.css\";\nimport Scroll from '../components/Scroll'\nimport ErrorBoundary from '../components/ErrorBoundary'\nimport Header from '../components/Header'\n\nimport { setSearchField, requestRobots } from '../actions'\n\nconst mapStateToProps = (state) => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  }\n}\n\n// Refering to SearchBox.js, everytime the input value changes, we call a function \"searchChange\", which, referring to App.js, is onSearchChange, which is the function below. When onSearchChange is called, we dispatch an action \"setSearchField\" which is then read by the reducer, which changes the state, and updates the store. The store then makes changes to the props, and the components updates\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\n\nexport class App extends Component {\n\n  componentDidMount() {\n    this.props.onRequestRobots()\n  };\n\n  render() {\n    const { searchField, onSearchChange, robots } = this.props\n    const filteredRobots = robots.filter(robot => {\n      return robot.name\n        .toLowerCase()\n        .includes(searchField.toLowerCase());\n    });\n    if (!robots.length) {\n      return (<h1>Loading...</h1>)\n    } else {\n      return (\n        <div className=\"tc\">\n          <Header />\n          <SearchBox searchChange={onSearchChange} />\n          <Scroll>\n            <ErrorBoundary>\n              <CardList robots={filteredRobots} />\n            </ErrorBoundary>\n          </Scroll>\n        </div>\n      )\n    }\n  }\n}\n\n// connect is a higher order function that returns another function\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// Note to self: Actions are payloads of information that send data from your application to your store. They are the only source of information for the store. You send them to the store using store.dispatch().\nimport { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_FAILED, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_PENDING } from './constants.js'\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n}\n\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD'\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING'\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS'\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED'\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// Reducers specify how the application's state changes in response to actions sent to the store. Remember that actions only describe what happened, but don't describe how the application's state changes.\n\nimport { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_FAILED, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_PENDING } from './constants.js'\n\nconst initialStateSearch = {\n    searchField: ''\n}\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n    switch (action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state, { searchField: action.payload })\n        default:\n            return state\n    }\n}\n\nconst initialStateRobots = {\n    isPending: true,\n    robots: [],\n    error: ''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n    switch (action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, { isPending: true })\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, { isPending: false, robots: action.payload })\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, { isPending: false, error: action.payload })\n        default:\n            return state\n    }\n}\n\n\n\n// export const requestRobots = (state=initialStateRobots, action={}) => {\n//     switch (action.type) {\n//         case REQUEST_ROBOTS_PENDING:\n//             return Object.assign({}, state, { isPending: true })\n//         case REQUEST_ROBOTS_SUCCESS:\n//             return Object.assign({}, state, { isPending: false, robots: action.payload })\n//         case REQUEST_ROBOTS_FAILED:\n//             return Object.assign({}, state, { isPending: false, error: action.payload })\n//         default:\n//             return state\n//     }\n// }\n\n\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware, combineReducers } from 'redux'\nimport \"./index.css\";\nimport App from './containers/App'\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"tachyons\";\nimport { searchRobots, requestRobots } from './reducers'\nimport { createLogger } from 'redux-logger'\nimport thunkMiddleware from 'redux-thunk'\n\n// redux-logger is a tool that we install to help log all actions' impact on state in console\nconst logger = createLogger()\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\n\n// Redux-Thunk is the most popular middleware used to handle asynchronous actions in Redux. We need something to handle the async action of making a request for JSON data\n\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\n// <Provider /> is the higher-order component provided by React Redux that lets you bind Redux to React (see Usage with React).\n// All container components need access to the Redux store so they can subscribe to it. One option would be to pass it as a prop to every container component. However it gets tedious, as you have to wire store even through presentational components just because they happen to render a container deep in the component tree.\n// The option we recommend is to use a special React Redux component called <Provider> to magically make the store available to all container components in the application without passing it explicitly. You only need to use it once when you render the root component:\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();"],"sourceRoot":""}